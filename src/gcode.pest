// Copyright (c) 2019 Georg Brandl.  Licensed under the Apache License,
// Version 2.0 <LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0>
// or the MIT license <LICENSE-MIT or http://opensource.org/licenses/MIT>, at
// your option. This file may not be copied, modified, or distributed except
// according to those terms.

file   = _{ (line? ~ NEWLINE)* ~ EOI }
line   =  { (word | par_assign)+ }

// argument word syntax

word   =  { letter ~ value }
letter =  { ASCII_ALPHA }
value  =  { num | par_ref | expr_brack }

// number syntax

num    =  { ("+" | "-")? ~ (ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT*)? | "." ~ ASCII_DIGIT+) }
name   =  { (ASCII_ALPHA | "_")+ }

// parameter syntax

par_assign =  { par_ref ~ "=" ~ value }
par_ref    =  { "#" ~ (par_num | "<" ~ name ~ ">" | par_ref | expr_brack) }
par_num    =  { ASCII_DIGIT+ }

// expression syntax

expr_brack = _{ "[" ~ expr ~ "]" }
expr       =  { expr_cmp ~ (op_log ~ expr_cmp)* }
expr_cmp   =  { expr_add ~ (op_cmp ~ expr_add)* }
expr_add   =  { expr_mul ~ (op_add ~ expr_mul)* }
expr_mul   =  { expr_pow ~ (op_mul ~ expr_pow)* }
expr_pow   =  { expr_atom ~ (op_pow ~ expr_atom)* }
expr_atom  =  { expr_atan | expr_call | num | par_ref | expr_brack }
expr_atan  =  { ^"ATAN" ~ expr_brack ~ "/" ~ expr_brack }
expr_call  =  { name ~ expr_brack }

// operators

op_pow  =  { "**" }
op_mul  =  { "*" | "/" | ^"MOD" }
op_add  =  { "+" | "-" }
op_cmp  =  { ^"EQ" | ^"NE" | ^"GT" | ^"GE" | ^"LT" | ^"LE" }
op_log  =  { ^"AND" | ^"OR" | ^"XOR" }
