// Copyright (c) 2019 Georg Brandl.  Licensed under the Apache License,
// Version 2.0 <LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0>
// or the MIT license <LICENSE-MIT or http://opensource.org/licenses/MIT>, at
// your option. This file may not be copied, modified, or distributed except
// according to those terms.

file   = _{ (line? ~ NEWLINE)* ~ EOI }
line   =  { (word | par_assign)+ }

// argument word syntax

word   =  { letter ~ value }
letter =  { ASCII_ALPHA }
value  =  { num | par_ref | expr_brack }

// number syntax

num    =  { ("+" | "-")? ~ (ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT*)? | "." ~ ASCII_DIGIT+) }

// parameter syntax

par_assign =  { par_ref ~ "=" ~ value }
par_ref    =  { "#" ~ (num | expr_brack | par_name | par_ref) }
par_name   =  { "<" ~ name ~ ">" }
name       = _{ (ASCII_ALPHA | "_")+ }

// expression syntax

expr_brack = _{ "[" ~ expr ~ "]" }
expr       =  { expr_term ~ (expr_op ~ expr_term)* }
expr_term  = _{ expr_atan | expr_call | num | par_ref | expr_brack }
expr_atan  =  { ^"ATAN" ~ "[" ~ expr ~ "]" ~ "/" ~ "[" ~ expr ~ "]" }
expr_call  =  { name ~ "[" ~ expr ~ "]" }
expr_op    = _{ op_exp | op_mul | op_div | op_mod | op_add | op_sub |
                op_eq | op_ne | op_gt | op_ge | op_lt | op_le |
                op_and | op_or | op_xor }
// operators

op_exp  =  { "**" }
op_mul  =  { "*" }
op_div  =  { "/" }
op_mod  =  { ^"MOD" }
op_add  =  { "+" }
op_sub  =  { "-" }
op_eq   =  { ^"EQ" }
op_ne   =  { ^"NE" }
op_gt   =  { ^"GT" }
op_ge   =  { ^"GE" }
op_lt   =  { ^"LT" }
op_le   =  { ^"LE" }
op_and  =  { ^"AND" }
op_or   =  { ^"OR" }
op_xor  =  { ^"XOR" }
